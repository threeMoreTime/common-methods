// 引入 TerserPlugin，用于压缩和混淆 JavaScript 代码
const TerserPlugin = require("terser-webpack-plugin");
const fs = require("fs");
const path = require("path");
const https = require("https");

// 创建 HTTPS Agent，携带客户端证书
const httpsAgent = new https.Agent({
  pfx: fs.readFileSync(path.resolve(__dirname, "src/certs/client.p12")), // 读取客户端 PFX 证书文件
  passphrase: process.env.VUE_APP_CLIENT_CERT_PASSPHRASE || "34278", // 提供 PFX 文件的密码
  rejectUnauthorized: false, // 根据需要设置是否验证服务器证书
});

module.exports = {
  publicPath: process.env.NODE_ENV === "development" ? "/" : "",

  // 配置开发服务器相关选项
  devServer: {
    open: true,
    host: "0.0.0.0",
    port: 8082, // 设置开发服务器的端口号
    https: true, // 使用 HTTPS 协议
    // 配置代理，以解决开发过程中 API 请求的跨域问题
    proxy: {
      "/api": {
        target: "https://xxx.xx.x.xxx:xxxxx",
        changeOrigin: true, // 是否改变请求源，通常设置为 true 以支持虚拟托管
        secure: false, // 如果代理目标是 HTTPS 协议，需要设置为 false 以支持自签名证书
        // 使用自定义 HTTPS Agent 以携带客户端证书
        agent: httpsAgent,
      },
    },
  },